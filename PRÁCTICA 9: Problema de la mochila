#include <iostream>
#include <vector>
using namespace std;

// Función que resuelve el problema de la mochila 0/1 usando programación dinámica
int knapsack(int W, const vector<int>& weights, const vector<int>& values, int n) {
    // Crear una matriz dp para almacenar los valores máximos
    vector<vector<int>> dp(n + 1, vector<int>(W + 1, 0));

    // Llenar la matriz dp
    for (int i = 1; i <= n; ++i) {
        for (int w = 1; w <= W; ++w) {
            if (weights[i - 1] <= w) {
                dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]);
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }

    // El valor máximo que se puede obtener con el peso máximo permitido W
    return dp[n][W];
}

int main() {
    int W = 50;  // Capacidad de la mochila
    vector<int> weights = {10, 20, 30};  // Pesos de los objetos
    vector<int> values = {60, 100, 120};  // Valores de los objetos
    int n = weights.size();

    cout << "El valor máximo que se puede obtener es " << knapsack(W, weights, values, n) << endl;

    return 0;
}
