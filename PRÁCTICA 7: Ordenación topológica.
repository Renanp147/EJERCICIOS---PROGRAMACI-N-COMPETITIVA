#include <iostream>
#include <vector>
#include <stack>

using namespace std;

// Función auxiliar para realizar DFS
void dfs(int v, vector<bool>& visited, stack<int>& Stack, const vector<vector<int>>& adj) {
    visited[v] = true;  // Marca el nodo actual como visitado

    for (int i : adj[v]) // Recorre todos los nodos adyacentes
        if (!visited[i])
            dfs(i, visited, Stack, adj);  // Llama recursivamente a DFS para los nodos no visitados

    Stack.push(v);  // Inserta el nodo en el stack sólo cuando todos sus nodos adyacentes han sido procesados
}

// Función principal para realizar la ordenación topológica
vector<int> topologicalSort(int V, const vector<vector<int>>& adj) {
    stack<int> Stack;
    vector<bool> visited(V, false);  // Inicializa todos los nodos como no visitados
    vector<int> result;

    for (int i = 0; i < V; i++)
        if (!visited[i])
            dfs(i, visited, Stack, adj);  // Realiza DFS para todos los nodos no visitados

    while (!Stack.empty()) {  // Extrae los nodos del stack y los coloca en el resultado
        result.push_back(Stack.top());
        Stack.pop();
    }
    return result;
}

int main() {
    int V = 6;
    vector<vector<int>> adj(V);

    // Agrega los bordes del grafo (Ejemplo)
    adj[5].push_back(2);
    adj[5].push_back(0);
    adj[4].push_back(0);
    adj[4].push_back(1);
    adj[2].push_back(3);
    adj[3].push_back(1);

    vector<int> result = topologicalSort(V, adj);
    
    // Imprime la ordenación topológica
    for (int i : result)
        cout << i << " ";
    cout << endl;

    return 0;
}
